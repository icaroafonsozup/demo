name: 'build-kotlin-micronaut-maven'
on:
  push:
    branches:
      - dev
  pull_request:

jobs:
  aws-login:
    runs-on: self-hosted
    outputs:
      ecr_pwd: ${{ steps.ecrpassword.outputs.ecr_pwd }}
    steps:
      - id: ecrpassword
        run: |
          ECR_PWD=`aws ecr get-login-password --region us-east-1` 
          echo "::set-output name=ecr_pwd::$ECR_PWD"
  build:
    runs-on: self-hosted
    needs: aws-login
    container:
      image: 475383224204.dkr.ecr.us-east-1.amazonaws.com/step-image-java11-maven:latest
      credentials:
        username: AWS
        password: ${{ needs.aws-login.outputs.ecr_pwd }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('./pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Test
        run: mvn test
        working-directory: ./
      - name: Build
        run: mvn -B clean install
        working-directory: ./
      - name: Lint
        run: mvn antrun:run@ktlint
        working-directory: ./
      - uses: actions/cache@v1
        with:
          path: target/demo-*.jar
          key: ${{ github.sha }}-dev-jar

  quality:
    runs-on: self-hosted
    needs: [aws-login,build]
    container:
      image: 475383224204.dkr.ecr.us-east-1.amazonaws.com/step-image-sonar-maven:latest
      credentials:
        username: AWS
        password: ${{ needs.aws-login.outputs.ecr_pwd }}
      env:
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Sonar
        run: sh /orange-init.sh
  
  security:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Horusec Security
        run: |
          curl -fsSL https://horusec-cli.s3.amazonaws.com/install.sh | bash
          horusec start -p ./
        working-directory: ./

  docker-build:
    runs-on: self-hosted
    needs: [aws-login,quality,security]
    container:
      image: 475383224204.dkr.ecr.us-east-1.amazonaws.com/step-image-docker-build:latest
      credentials:
        username: AWS
        password: ${{ needs.aws-login.outputs.ecr_pwd }}
      env:
        REGISTRY_URL: 475383224204.dkr.ecr.us-east-1.amazonaws.com
        REPOSITORY_NAME: micronaut-demo
        IMAGE_TAG: dev
        DOCKERFILE_PATH: .
    steps:
      - uses: actions/cache@v1
        with:
          path: target/demo-*.jar
          key: ${{ github.sha }}-dev-jar
      - name: Build docker image
        run: sh /orange-init.sh

  docker-push:
    runs-on: self-hosted
    needs: [aws-login,docker-build]
    container:
      image: 475383224204.dkr.ecr.us-east-1.amazonaws.com/step-image-docker-push:latest
      credentials:
        username: AWS
        password: ${{ needs.aws-login.outputs.ecr_pwd }}
      env:
        REGISTRY_URL: 475383224204.dkr.ecr.us-east-1.amazonaws.com
        REGISTRY_USERNAME: AWS
        REGISTRY_PASSWORD: ${{ needs.get-aws-password.outputs.ecr_pwd }}
        REPOSITORY_NAME: micronaut-demo
        IMAGE_TAG: dev
    steps:
      - name: Publish docker image
        run: sh /orange-init.sh

  deploy-eks:
    runs-on: self-hosted
    needs: [docker-push, aws-login]
    container:
      image: 475383224204.dkr.ecr.us-east-1.amazonaws.com/step-image-deploy-eks:latest
      credentials:
        username: AWS
        password: ${{ needs.aws-login.outputs.ecr_pwd }}
      env:
        APP_NAMESPACE: micronaut-demo
        APP_NAME: micronaut-demo
        APP_IMAGE: 475383224204.dkr.ecr.us-east-1.amazonaws.com/micronaut-demo:dev
        APP_PORT: 8080
        APP_TARGET_PORT: 8080
        AWS_REGION: us-east-1
        CLUSTER_NAME: orange-pipes-sandbox
        COMMIT_SHA: ${{ github.sha }}
    steps:
      - name: Add sandbox k8s cluster to hosts
        run: echo "54.87.1.134 DDED8C1BC51F2D4FC42588C3425440F1.gr7.us-east-1.eks.amazonaws.com" >> /etc/hosts
      - name: Kubectl deploy
        run: sh /orange-init.sh
